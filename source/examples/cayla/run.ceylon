import io.vertx.ceylon.platform {
  Platform
}
import ceylon.json {
  JsonObject = Object,
  JsonArray = Array
}
import io.vertx.ceylon.core.eventbus {
  Message
}
import ceylon.promise {
  Promise
}
import io.cayla.web {
  Application,
  Config
}

String dbAddress = "com.bloidonia.jdbcpersistor";
String dbModuleId = "com.bloidonia~mod-jdbc-persistor~2.1.3";

shared void run() {
  
  value plf = Platform();
  value dbModule = plf.deploy(dbModuleId, JsonObject {
    // Config here
  }, 1);
  
  value startup = dbModule.
  compose<Message<JsonObject>>  {
    Promise<Message<JsonObject>> onFulfilled(String id) {
      value action = JsonObject {
        "action"-> "execute",
         "stmt"->  "CREATE TABLE test ( id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)
                     NOT NULL, name VARCHAR(80), age  INTEGER, CONSTRAINT testid PRIMARY KEY ( id ) )"
      };
      return plf.vertx.eventBus.send<JsonObject>("com.bloidonia.jdbcpersistor", action);
    }
  }.compose {
    String onFulfilled(Message<JsonObject> result) {
      assert(exists status = result.body["status"]);
      if (status == "ok") {
        return "ok";
      } else {
        throw Exception("Could not create table");
      }
    }
  }.compose<Message<JsonObject>> {
    Promise<Message<JsonObject>> onFulfilled(String status) {
      value action = JsonObject {
        "action"-> "insert",
        "stmt"->  "INSERT INTO test(name, age) VALUES (?,?)",
        "values"-> JsonArray {
          JsonArray { "Julien", 40 }
        }
      };
      return plf.vertx.eventBus.send<JsonObject>("com.bloidonia.jdbcpersistor", action);
    }
  }.compose {
    String onFulfilled(Message<JsonObject> result) {
      assert(exists status = result.body["status"]);
      if (status == "ok") {
        return "ok";
      } else {
        assert(exists msg = result.body["message"]);
        throw Exception("Could not insert in test table ``msg``");
      }
    }
  };
  
  
  
  value startupResult = startup.future.get();
  if (is Throwable startupResult) {
    print("failed");
    startupResult.printStackTrace();
  } else {
    
    // Now do a simple request
    // That will go later in Cayla handler
    value action = JsonObject {
      "action"-> "select",
      "stmt"-> "select * from test"
    };
    plf.vertx.eventBus.send<JsonObject>("com.bloidonia.jdbcpersistor", action).
    compose {
      void onFulfilled(Message<JsonObject> msg) {
        print("got response");
        assert(is JsonArray rows = msg.body["result"]);
        for (row in rows) {
          print("--> " + row.string);
        }
      }
    }.future.get();
    
    // Create empty app
    value app = Application(
      `package examples.cayla`,
      Config(),
      plf.vertx
    );
    
    app.start().future.get();
    
    print("ok");
  }    
}